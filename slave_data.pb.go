// Code generated by protoc-gen-go. DO NOT EDIT.
// source: slave_data.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Change below to timestamp
type Heartbeat struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Heartbeat) Reset()         { *m = Heartbeat{} }
func (m *Heartbeat) String() string { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()    {}
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_40fe6c7fe73465a8, []int{0}
}

func (m *Heartbeat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Heartbeat.Unmarshal(m, b)
}
func (m *Heartbeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Heartbeat.Marshal(b, m, deterministic)
}
func (m *Heartbeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Heartbeat.Merge(m, src)
}
func (m *Heartbeat) XXX_Size() int {
	return xxx_messageInfo_Heartbeat.Size(m)
}
func (m *Heartbeat) XXX_DiscardUnknown() {
	xxx_messageInfo_Heartbeat.DiscardUnknown(m)
}

var xxx_messageInfo_Heartbeat proto.InternalMessageInfo

func (m *Heartbeat) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Envelopes struct {
	Envelope             []*Envelope `protobuf:"bytes,1,rep,name=envelope,proto3" json:"envelope,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Envelopes) Reset()         { *m = Envelopes{} }
func (m *Envelopes) String() string { return proto.CompactTextString(m) }
func (*Envelopes) ProtoMessage()    {}
func (*Envelopes) Descriptor() ([]byte, []int) {
	return fileDescriptor_40fe6c7fe73465a8, []int{1}
}

func (m *Envelopes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Envelopes.Unmarshal(m, b)
}
func (m *Envelopes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Envelopes.Marshal(b, m, deterministic)
}
func (m *Envelopes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelopes.Merge(m, src)
}
func (m *Envelopes) XXX_Size() int {
	return xxx_messageInfo_Envelopes.Size(m)
}
func (m *Envelopes) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelopes.DiscardUnknown(m)
}

var xxx_messageInfo_Envelopes proto.InternalMessageInfo

func (m *Envelopes) GetEnvelope() []*Envelope {
	if m != nil {
		return m.Envelope
	}
	return nil
}

type Envelope struct {
	DestinationVertexID  uint32   `protobuf:"varint,1,opt,name=destinationVertexID,proto3" json:"destinationVertexID,omitempty"`
	Message              *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_40fe6c7fe73465a8, []int{2}
}

func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Envelope.Unmarshal(m, b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
}
func (m *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(m, src)
}
func (m *Envelope) XXX_Size() int {
	return xxx_messageInfo_Envelope.Size(m)
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetDestinationVertexID() uint32 {
	if m != nil {
		return m.DestinationVertexID
	}
	return 0
}

func (m *Envelope) GetMessage() *Message {
	if m != nil {
		return m.Message
	}
	return nil
}

type Message struct {
	CandidateShortestPath uint32   `protobuf:"varint,1,opt,name=candidateShortestPath,proto3" json:"candidateShortestPath,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_40fe6c7fe73465a8, []int{3}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetCandidateShortestPath() uint32 {
	if m != nil {
		return m.CandidateShortestPath
	}
	return 0
}

type Vertices struct {
	Vertices             []*Vertex `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Vertices) Reset()         { *m = Vertices{} }
func (m *Vertices) String() string { return proto.CompactTextString(m) }
func (*Vertices) ProtoMessage()    {}
func (*Vertices) Descriptor() ([]byte, []int) {
	return fileDescriptor_40fe6c7fe73465a8, []int{4}
}

func (m *Vertices) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vertices.Unmarshal(m, b)
}
func (m *Vertices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vertices.Marshal(b, m, deterministic)
}
func (m *Vertices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vertices.Merge(m, src)
}
func (m *Vertices) XXX_Size() int {
	return xxx_messageInfo_Vertices.Size(m)
}
func (m *Vertices) XXX_DiscardUnknown() {
	xxx_messageInfo_Vertices.DiscardUnknown(m)
}

var xxx_messageInfo_Vertices proto.InternalMessageInfo

func (m *Vertices) GetVertices() []*Vertex {
	if m != nil {
		return m.Vertices
	}
	return nil
}

type Vertex struct {
	VertexID             uint32       `protobuf:"varint,1,opt,name=vertexID,proto3" json:"vertexID,omitempty"`
	State                *VertexState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	OutNeighbourIds      []uint32     `protobuf:"varint,3,rep,packed,name=outNeighbourIds,proto3" json:"outNeighbourIds,omitempty"`
	VoteToHalt           bool         `protobuf:"varint,4,opt,name=voteToHalt,proto3" json:"voteToHalt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Vertex) Reset()         { *m = Vertex{} }
func (m *Vertex) String() string { return proto.CompactTextString(m) }
func (*Vertex) ProtoMessage()    {}
func (*Vertex) Descriptor() ([]byte, []int) {
	return fileDescriptor_40fe6c7fe73465a8, []int{5}
}

func (m *Vertex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vertex.Unmarshal(m, b)
}
func (m *Vertex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vertex.Marshal(b, m, deterministic)
}
func (m *Vertex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vertex.Merge(m, src)
}
func (m *Vertex) XXX_Size() int {
	return xxx_messageInfo_Vertex.Size(m)
}
func (m *Vertex) XXX_DiscardUnknown() {
	xxx_messageInfo_Vertex.DiscardUnknown(m)
}

var xxx_messageInfo_Vertex proto.InternalMessageInfo

func (m *Vertex) GetVertexID() uint32 {
	if m != nil {
		return m.VertexID
	}
	return 0
}

func (m *Vertex) GetState() *VertexState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Vertex) GetOutNeighbourIds() []uint32 {
	if m != nil {
		return m.OutNeighbourIds
	}
	return nil
}

func (m *Vertex) GetVoteToHalt() bool {
	if m != nil {
		return m.VoteToHalt
	}
	return false
}

type VertexState struct {
	ShortestPathSize     uint32   `protobuf:"varint,1,opt,name=shortestPathSize,proto3" json:"shortestPathSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VertexState) Reset()         { *m = VertexState{} }
func (m *VertexState) String() string { return proto.CompactTextString(m) }
func (*VertexState) ProtoMessage()    {}
func (*VertexState) Descriptor() ([]byte, []int) {
	return fileDescriptor_40fe6c7fe73465a8, []int{6}
}

func (m *VertexState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VertexState.Unmarshal(m, b)
}
func (m *VertexState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VertexState.Marshal(b, m, deterministic)
}
func (m *VertexState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VertexState.Merge(m, src)
}
func (m *VertexState) XXX_Size() int {
	return xxx_messageInfo_VertexState.Size(m)
}
func (m *VertexState) XXX_DiscardUnknown() {
	xxx_messageInfo_VertexState.DiscardUnknown(m)
}

var xxx_messageInfo_VertexState proto.InternalMessageInfo

func (m *VertexState) GetShortestPathSize() uint32 {
	if m != nil {
		return m.ShortestPathSize
	}
	return 0
}

func init() {
	proto.RegisterType((*Heartbeat)(nil), "main.Heartbeat")
	proto.RegisterType((*Envelopes)(nil), "main.Envelopes")
	proto.RegisterType((*Envelope)(nil), "main.Envelope")
	proto.RegisterType((*Message)(nil), "main.Message")
	proto.RegisterType((*Vertices)(nil), "main.Vertices")
	proto.RegisterType((*Vertex)(nil), "main.Vertex")
	proto.RegisterType((*VertexState)(nil), "main.VertexState")
}

func init() { proto.RegisterFile("slave_data.proto", fileDescriptor_40fe6c7fe73465a8) }

var fileDescriptor_40fe6c7fe73465a8 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x6b, 0xdb, 0x40,
	0x10, 0xc5, 0xa3, 0x3a, 0x7f, 0xe4, 0x71, 0x9c, 0xc4, 0x53, 0x0a, 0xc2, 0x94, 0x22, 0xf6, 0x12,
	0x35, 0x07, 0xb7, 0x38, 0x81, 0xd2, 0x53, 0x2f, 0x0d, 0x89, 0xa1, 0x2d, 0x41, 0x2e, 0xbd, 0x96,
	0xb1, 0x35, 0xc4, 0x0b, 0x96, 0x56, 0xec, 0x8e, 0x4d, 0xda, 0x2f, 0xd2, 0x53, 0xbf, 0x6b, 0x91,
	0x57, 0x96, 0x95, 0x26, 0x37, 0xcd, 0xfb, 0x69, 0xe6, 0xed, 0xdb, 0x1d, 0x38, 0x73, 0x4b, 0x5a,
	0xf3, 0xcf, 0x8c, 0x84, 0x46, 0xa5, 0x35, 0x62, 0x70, 0x3f, 0x27, 0x5d, 0x0c, 0x07, 0x39, 0x39,
	0x61, 0xdb, 0x02, 0xea, 0x2d, 0x74, 0x6f, 0x99, 0xac, 0xcc, 0x98, 0x04, 0x5f, 0x43, 0x57, 0x74,
	0xce, 0x4e, 0x28, 0x2f, 0xa3, 0x20, 0x0e, 0x92, 0x4e, 0xba, 0x13, 0xd4, 0x07, 0xe8, 0x5e, 0x17,
	0x6b, 0x5e, 0x9a, 0x92, 0x1d, 0x5e, 0x40, 0xc8, 0x75, 0x11, 0x05, 0x71, 0x27, 0xe9, 0x8d, 0x4f,
	0x46, 0x95, 0xc7, 0x68, 0xfb, 0x4b, 0xda, 0x70, 0xc5, 0x10, 0x6e, 0x55, 0x7c, 0x0f, 0x2f, 0x33,
	0x76, 0xa2, 0x0b, 0x12, 0x6d, 0x8a, 0x1f, 0x6c, 0x85, 0x1f, 0x26, 0x9f, 0x37, 0x66, 0xfd, 0xf4,
	0x39, 0x84, 0xe7, 0x70, 0x94, 0xb3, 0x73, 0x74, 0xcf, 0xd1, 0x8b, 0x38, 0x48, 0x7a, 0xe3, 0xbe,
	0x37, 0xfa, 0xea, 0xc5, 0x74, 0x4b, 0xd5, 0x27, 0x38, 0xaa, 0x35, 0xbc, 0x82, 0x57, 0x73, 0x2a,
	0x32, 0x9d, 0x91, 0xf0, 0x74, 0x61, 0xac, 0xb0, 0x93, 0x3b, 0x92, 0x45, 0xed, 0xf3, 0x3c, 0x54,
	0x57, 0x10, 0x56, 0xae, 0x7a, 0xce, 0x0e, 0x13, 0x08, 0xd7, 0xf5, 0x77, 0x9d, 0xef, 0xd8, 0xdb,
	0xfa, 0x73, 0xa5, 0x0d, 0x55, 0x7f, 0x02, 0x38, 0xf4, 0x22, 0x0e, 0x7d, 0x53, 0x2b, 0x51, 0x53,
	0xe3, 0x39, 0x1c, 0x38, 0x21, 0xd9, 0x86, 0x18, 0xb4, 0xa7, 0x4d, 0x2b, 0x90, 0x7a, 0x8e, 0x09,
	0x9c, 0x9a, 0x95, 0x7c, 0x63, 0x7d, 0xbf, 0x98, 0x99, 0x95, 0x9d, 0x64, 0x2e, 0xea, 0xc4, 0x9d,
	0xa4, 0x9f, 0xfe, 0x2f, 0xe3, 0x1b, 0x80, 0xb5, 0x11, 0xfe, 0x6e, 0x6e, 0x69, 0x29, 0xd1, 0x7e,
	0x1c, 0x24, 0x61, 0xda, 0x52, 0xd4, 0x47, 0xe8, 0xb5, 0xe6, 0xe3, 0x05, 0x9c, 0xb9, 0x56, 0xdc,
	0xa9, 0xfe, 0xcd, 0xf5, 0x29, 0x9f, 0xe8, 0xe3, 0xbf, 0x01, 0x1c, 0x4c, 0xab, 0x25, 0xc2, 0x11,
	0x1c, 0xdf, 0xb0, 0xec, 0x76, 0xa4, 0x57, 0x3f, 0x73, 0x5e, 0xca, 0xaf, 0xe1, 0xa9, 0x2f, 0x1a,
	0xaa, 0xf6, 0xf0, 0x12, 0xf0, 0x8b, 0xa1, 0xec, 0xc6, 0x52, 0xb9, 0xb8, 0x23, 0x2b, 0xba, 0x7a,
	0x4c, 0x3c, 0xd9, 0xc5, 0xad, 0x2e, 0x6d, 0xd8, 0x9e, 0xa2, 0xf6, 0xf0, 0x1d, 0x0c, 0x26, 0x85,
	0x16, 0x4d, 0xc2, 0xd7, 0x0f, 0x3c, 0x5f, 0x6d, 0x7a, 0x1e, 0x39, 0x3d, 0x6e, 0x98, 0x1d, 0x6e,
	0xb6, 0xf7, 0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x0a, 0x0b, 0x7f, 0xea, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SlaveClient is the client API for Slave service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlaveClient interface {
	GetHeartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Heartbeat, error)
	LoadGraphPartition(ctx context.Context, in *Vertices, opts ...grpc.CallOption) (*Empty, error)
	InitiateExecution(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type slaveClient struct {
	cc *grpc.ClientConn
}

func NewSlaveClient(cc *grpc.ClientConn) SlaveClient {
	return &slaveClient{cc}
}

func (c *slaveClient) GetHeartbeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Heartbeat, error) {
	out := new(Heartbeat)
	err := c.cc.Invoke(ctx, "/main.Slave/GetHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveClient) LoadGraphPartition(ctx context.Context, in *Vertices, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/main.Slave/LoadGraphPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *slaveClient) InitiateExecution(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/main.Slave/InitiateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlaveServer is the server API for Slave service.
type SlaveServer interface {
	GetHeartbeat(context.Context, *Empty) (*Heartbeat, error)
	LoadGraphPartition(context.Context, *Vertices) (*Empty, error)
	InitiateExecution(context.Context, *Empty) (*Empty, error)
}

// UnimplementedSlaveServer can be embedded to have forward compatible implementations.
type UnimplementedSlaveServer struct {
}

func (*UnimplementedSlaveServer) GetHeartbeat(ctx context.Context, req *Empty) (*Heartbeat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeartbeat not implemented")
}
func (*UnimplementedSlaveServer) LoadGraphPartition(ctx context.Context, req *Vertices) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadGraphPartition not implemented")
}
func (*UnimplementedSlaveServer) InitiateExecution(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateExecution not implemented")
}

func RegisterSlaveServer(s *grpc.Server, srv SlaveServer) {
	s.RegisterService(&_Slave_serviceDesc, srv)
}

func _Slave_GetHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServer).GetHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Slave/GetHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServer).GetHeartbeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slave_LoadGraphPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vertices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServer).LoadGraphPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Slave/LoadGraphPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServer).LoadGraphPartition(ctx, req.(*Vertices))
	}
	return interceptor(ctx, in, info, handler)
}

func _Slave_InitiateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServer).InitiateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Slave/InitiateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServer).InitiateExecution(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Slave_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.Slave",
	HandlerType: (*SlaveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHeartbeat",
			Handler:    _Slave_GetHeartbeat_Handler,
		},
		{
			MethodName: "LoadGraphPartition",
			Handler:    _Slave_LoadGraphPartition_Handler,
		},
		{
			MethodName: "InitiateExecution",
			Handler:    _Slave_InitiateExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slave_data.proto",
}
